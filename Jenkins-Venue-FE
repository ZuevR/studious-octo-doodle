pipeline {
    agent any

    stages {
        stage('Prepare ENV') {
            steps {
                script {
                    if ("${tagToCreate}".isEmpty()) {
                        throw new Exception("tagToCreate field is missing, please check")
                    }

                    env.JGIT_TAG = "${tagToCreate}.${BUILD_NUMBER}.fun-fe-${APP_ENV}"

                    if ("${APP_ENV}" == "development") {
                        env.JGIT_TAG = "${tagToCreate}.${BUILD_NUMBER}.fun-fe-dev"
                    }
                }
            }
        }

        stage('Set tags') {
            steps {
                dir('src') {
                    git branch: "${WORK_BRANCH}",
                    credentialsId: "${GIT_CREDS}",
                    url: 'git@github.com:funi-main/kane-funimation-v2.git'
                    sh 'git tag -a -f ${JGIT_TAG} -m "Creating version from ${BUILD_URL}"'
                    //sshagent(["${GIT_CREDS}"]) {
                    //    sh "git push git@github.com:funi-main/kane-funimation-v2.git ${JGIT_TAG}"
                    //}
                }

                dir('source2-main') {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '*/venue']],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [
                            [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: 'frontend/'], [path: 'maintenance/']]],
                            [$class: 'LocalBranch', localBranch: "**"]
                        ],
                        submoduleCfg: [],
                        userRemoteConfigs: [
                            [credentialsId: 'bebop-funigit', url: 'git@github.com:funi-main/source2-main.git']
                        ]
                    ])

                    sh 'git tag -a -f ${JGIT_TAG} -m "Creating version from ${BUILD_URL}"'

                    //sshagent(["${GIT_CREDS}"]) {
                    //    sh "git push git@github.com:funi-main/source2-main.git ${JGIT_TAG}"
                    //}
                }

                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/master']],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [
                        [$class: 'RelativeTargetDirectory', relativeTargetDir: 'geoip'],
                        [$class: 'LocalBranch', localBranch: "**"]
                    ],
                    submoduleCfg: [],
                    userRemoteConfigs: [
                        [credentialsId: 'bebop-funigit', url: 'git@github.com:maxmind/geoipupdate.git']
                    ]
                ])
            }

        }

        stage('Build') {
            steps {
                timestamps {
                    ansiColor('xterm') {
                        sh ''' #!/bin/bash
                        sed -i "s/BUILD_NUMBER_PLACEHOLDER/c{BUILD_NUMBER}/g" source2-main/frontend/Dockerfile
                        sed -i "s/JENKINS_JOB_NAME_PLACEHOLDER/${JOB_NAME}/g" source2-main/frontend/Dockerfile
                        sed -i "s/GIT_TAG_PLACEHOLDER/${JGIT_TAG:-Untagged}/g" source2-main/frontend/Dockerfile
                        sed -i "s/GIT_BRANCH_PLACEHOLDER/${WORK_BRANCH}/g" source2-main/frontend/Dockerfile
                        '''

                        sh 'cp -r source2-main/maintenance src/kane'


                        sh ''' #!/bin/bash
                        ( find source2-main/ -type d -name ".git" && find source2-main/ -name ".gitignore" && find source2-main/ -name ".gitmodules" ) | xargs rm -rf
                        export AWS_DEFAULT_REGION=us-west-2

                        mv source2-main/frontend/* ./
                        mv source2-main/maintenance ./

                        if [ $WORK_BRANCH = "development" ]; then
                        rm nginx_site.conf
                        mv nginx-redirect.conf nginx_site.conf
                        fi

                        if [ $WORK_BRANCH = "qa" ]; then
                        rm nginx_site.conf
                        mv nginx-redirect.conf nginx_site.conf
                        fi

                        if [ $WORK_BRANCH = "stage" ]; then
                        rm nginx_site.conf
                        mv nginx-redirect.conf nginx_site.conf
                        fi

                        $(aws ecr get-login --region=us-west-2 --no-include-email)
                        '''
                    }
                }

                // think should work
                //step([
                //    $class: 'DsbNotificationBuilder',
                //    extensions: [
                //        [
                //            $class: 'ProfileNotifier',
                //            message: "${JOB_NAME} - Tag: ${JGIT_TAG} Name Branch: ${APP_ENV} BuildNum: ${BUILD_NUMBER} - STARTED",
                //            name: 'GS Venue DSB'
                //        ]
                //    ]
                //])

                sh '''#!/bin/bash
                docker build \
                --pull \
                -t ${ECR_URL}/venue-fe-${APP_ENV}:latest \
                -t ${ECR_URL}/venue-fe-${APP_ENV}:${JGIT_TAG} \
                -f Dockerfile .
                #docker push ${ECR_URL}/venue-fe-${APP_ENV}:latest
                #docker push ${ECR_URL}/venue-fe-${APP_ENV}:${JGIT_TAG}
                '''
            }
        }

        stage('Deploy') {
            steps {
                timestamps {
                    ansiColor('xterm') {
                        /*sh ''' #!/bin/bash
                        if [ $Environment = "development" ]; then
                        ecs deploy VENUE-DEV frontend -t ${JGIT_TAG} --region us-west-2 --timeout -1 || true
                        fi

                        if [ $APP_ENV = "qa" ]; then
                        ecs deploy VENUE-QA frontend -t ${JGIT_TAG} --region us-west-2 --timeout -1 || true
                        aws cloudfront create-invalidation --distribution-id E1ZBXWVSWIFZWF --paths "/*"
                        fi

                        if [ $APP_ENV = "uat" ]; then
                        ecs deploy VENUE-UAT frontend -t ${JGIT_TAG} --region us-west-2 --timeout -1 || true
                        aws cloudfront create-invalidation --distribution-id E69IIBXD85V2Y --paths "/*"
                        fi

                        if [ $APP_ENV = "pre-prod" ]; then
                        ecs deploy VENUE-PRE-PROD frontend -t ${JGIT_TAG} --region us-west-2 --timeout -1 || true
                        fi
                        ''' */
                    }
                }
            }
        }
    }

     //post {
     //    always {
     //      cleanWs()
     //    }
     //}
}


