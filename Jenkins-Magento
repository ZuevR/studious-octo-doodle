pipeline {
    agent { label 'venue-ci-spot-store' }

    stages {
        stage('Prepare ENV') {
            steps {
                script {
                    if ("${tagToCreate}".isEmpty()) {
                        throw new Exception("tagToCreate field is missing, please check")
                    }

                    env.JGIT_TAG = "${tagToCreate}.${BUILD_NUMBER}.fun-mag-${WORK_BRANCH}"

                    if ("${WORK_BRANCH}" == "develop") {
                        env.JGIT_TAG = "${tagToCreate}.${BUILD_NUMBER}.fun-mag-dev"
                    }

                    echo "$JENKINS_HOME"
                }
            }
        }

        stage('Pull the code') {
            steps {
                dir('source2-main') {
                    git branch: 'venue',
                    credentialsId: "${GIT_CREDS}",
                    url: 'git@github.com:funi-main/source2-main.git'
                    sh 'git tag -a -f ${JGIT_TAG} -m "Creating version from ${BUILD_URL}"'
                    dir('magento-store') {
                        git branch: "${WORK_BRANCH}",
                        credentialsId: "${GIT_CREDS}",
                        url: 'git@github.com:funi-main/funimation-magento.git'
                        sh 'git tag -a -f ${JGIT_TAG} -m "Creating version from ${BUILD_URL}"'
                        //sshagent(["${GIT_CREDS}"]) {
                        //    sh "git push git@github.com:funi-main/funimation-magento.git ${JGIT_TAG}"
                        //}
                    }
                }
            }
        }

        stage('Pre-notification') {
            steps {
                sh 'echo "Notification"'
                // think should work
                //step([
                //    $class: 'DsbNotificationBuilder',
                //    extensions: [
                //        [
                //            $class: 'ProfileNotifier',
                //            message: "${JOB_NAME} - Tag: ${JGIT_TAG} Branch: ${WORK_BRANCH} BuildNum: ${BUILD_NUMBER} - BUILD STARTED",
                //            name: 'Magento DEV'
                //        ]
                //    ]
                //])

                //step([
                //    $class: 'DsbNotificationBuilder',
                //    extensions: [
                //        [
                //            $class: 'ProfileNotifier',
                //            message: "${JOB_NAME} - Tag: ${JGIT_TAG} Branch: ${WORK_BRANCH} BuildNum: ${BUILD_NUMBER} - BUILD STARTED",
                //            name: 'GS Venue DSB'
                //        ]
                //    ]
                //])
            }
        }

        stage('Config stage') {
            steps {
                timestamps {
                    ansiColor('xterm') {
                        sh ''' #!/bin/bash
                        export HOME=${JENKINS_HOME}
                        composer clear-cache
                        '''
                    }
                }
                timestamps {
                    ansiColor('xterm') {
                        sh ''' #!/bin/bash -x
                        export HOME=${JENKINS_HOME}
                        rm -rf source2-main/venue-maintenance
                        cd source2-main/magento-store/
                        #composer install
                        chmod +x bin/magento

                        #/build/magento is located in an EFS, so it is accesible from any instance, it is automatically mounted on the Jenkins Store Slaves and the Magento Instances
                        cp /build/magento/shared/magento-environments/env-${WORK_BRANCH}.php app/etc/env.php

                        #if [ "$GIT_BRANCH" = "uat" ] || [ "$GIT_BRANCH" = "pre-prod" ]
                        #then
                            #bin/magento deploy:mode:set production
                            #bin/magento setup:upgrade
                            #bin/magento setup:di:compile
                            #bin/magento setup:static-content:deploy
                            #bin/magento cache:enable
                            #bin/magento cache:clean
                            #bin/magento cache:flush
                            #bin/magento indexer:reindex
                            #bin/magento maintenance:disable
                        #else
                            #php bin/magento deploy:mode:set developer
                            #php bin/magento setup:upgrade
                        	#php bin/magento setup:di:compile
                            #php bin/magento setup:static-content:deploy
                            #php bin/magento cache:enable
                            #php bin/magento cache:clean
                        	#php bin/magento cache:flush
                        	#php bin/magento indexer:reindex
                        	#php bin/magento maintenance:disable
                        #fi
                        '''
                    }
                }
            }
        }

        stage('Post-notification') {
            steps {
                sh 'echo "Notification"'
                // think should work
                //step([
                //    $class: 'DsbNotificationBuilder',
                //    extensions: [
                //        [
                //            $class: 'ProfileNotifier',
                //            message: "${JOB_NAME} - Tag: ${JGIT_TAG} Branch: ${WORK_BRANCH} BuildNum: ${BUILD_NUMBER} - DEPLOYING MAGENTO IN AWS ASG",
                //            name: 'Magento DEV'
                //        ]
                //    ]
                //])

                //step([
                //    $class: 'DsbNotificationBuilder',
                //    extensions: [
                //        [
                //            $class: 'ProfileNotifier',
                //            message: "${JOB_NAME} - Tag: ${JGIT_TAG} Branch: ${WORK_BRANCH} BuildNum: ${BUILD_NUMBER} - DEPLOYING MAGENTO IN AWS ASG",
                //            name: 'GS Venue DSB'
                //        ]
                //    ]
                //])

                //step([
                //    $class: 'DsbNotificationBuilder',
                //    extensions: [
                //        [
                //            $class: 'ProfileNotifier',
                //            message: "${JOB_NAME} - Tag: ${JGIT_TAG} Branch: ${WORK_BRANCH} BuildNum: ${BUILD_NUMBER} - DEPLOYED MAGENTO IN AWS ASG",
                //            name: 'Magento DEV'
                //        ]
                //    ]
                //])

                //step([
                //    $class: 'DsbNotificationBuilder',
                //    extensions: [
                //        [
                //            $class: 'ProfileNotifier',
                //            message: "${JOB_NAME} - Tag: ${JGIT_TAG} Branch: ${WORK_BRANCH} BuildNum: ${BUILD_NUMBER} - DEPLOYED MAGENTO IN AWS ASG",
                //            name: 'GS Venue DSB'
                //        ]
                //    ]
                //])

            }
        }

        stage('Deploy to AWS CodeDeploy') {
            steps {
                sh 'echo "Deploy to AWS CodeDeploy"'
                /*step([
                    $class: 'AWSCodeDeployPublisher',
                    applicationName: 'VENUE-STORE-${WORK_BRANCH}',
                    awsAccessKey: 'AKIAJRXXRVLQRDEYF2JA',
                    awsSecretKey: 'XXXX',
                    credentials: 'awsAccessKey',
                    deploymentConfig: 'CodeDeployDefault.OneAtATime',
                    deploymentGroupAppspec: false,
                    deploymentGroupName: '${WORK_BRANCH}',
                    deploymentMethod: 'deploy',
                    excludes: '',
                    iamRoleArn: '',
                    includes: '**',
                    pollingFreqSec: 60,
                    pollingTimeoutSec: 1000,
                    proxyHost: '',
                    proxyPort: 0,
                    region: 'us-west-2',
                    s3bucket: 'magento-build-storage',
                    s3prefix: '${WORK_BRANCH}_${BUILD_NUMBER}',
                    subdirectory: '',
                    versionFileName: '',
                    waitForCompletion: true
                ])*/
            }
        }

        stage('Cron-Runner') {
            when {
                expression { params.WORK_BRANCH == "uat" }
            }
            steps {
                timestamps {
                    ansiColor('xterm') {
                        sh ''' #!/bin/bash
                        rm -rf *
                        echo $WORKSPACE

                        #REVISION_TAG=$(aws deploy list-application-revisions --application-name VENUE-STORE-uat --sort-by registerTime --sort-order descending --query 'revisions[].s3Location[].eTag' --output json | jq .[0])

                        #REVISION_KEY=$(aws deploy list-application-revisions --application-name VENUE-STORE-uat --sort-by registerTime --sort-order descending --query 'revisions[].s3Location[].key' --output json | jq .[0])

                        #aws deploy create-deployment --application-name VENUE-STORE-${GIT_BRANCH} --deployment-config-name CodeDeployDefault.OneAtATime --deployment-group-name ${GIT_BRANCH}-cron --description "CRON RUNNER" --s3-location "bucket=magento-build-storage,bundleType=zip,key=$REVISION_KEY" --output json
                        '''
                    }
                }
            }
        }
    }
}