pipeline {
    agent any

    environment {
        APP_ENV_NAME = "${KANE_BRANCH}"
        JGIT_TAG="${tagToCreate}.${BUILD_NUMBER}.fun-be-${APP_ENV_NAME}"
    }


    stages {
        stage('Prepare ENV') {
            steps {
                script {
                    if ("${KANE_BRANCH}" == 'dev') { echo 1 }
                    // env.KANE_BRANCH = "${KANE_BRANCH}"
                }

                sh '''#!/bin/bash
                if [ -z ${tagToCreate} ]; then
                echo "tagToCreate field is missing, please check"
                exit 1
                fi
                '''
            }
        }

        stage('set tags') {
            steps {

                dir('src') {
                    checkout([$class: 'GitSCM',
                        branches: [[name: '*/venue']],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [
                          [
                            $class: 'SparseCheckoutPaths',
                            sparseCheckoutPaths: [
                              [ $class: 'SparseCheckoutPath', path: 'backend/' ]]
                            ],
                            [$class: 'LocalBranch', localBranch: "**"]
                          ],
                        submoduleCfg: [],
                        userRemoteConfigs: [[credentialsId: "${GIT_CREDS}",
                        url: 'git@github.com:funi-main/source2-main.git']]
                    ])
                    sh 'git tag -a -f ${JGIT_TAG} -m "Jenkins build tag"'
                     //sshagent(["${GIT_CREDS}"]) {
                     //   sh "git push git@github.com:funi-main/source2-main.git ${JGIT_TAG}"
                     //}
                }

                dir('code-dir') {
                    checkout([$class: 'GitSCM',
                        branches: [[name: '*/${KANE_BRANCH}']],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [
                            [$class: 'RelativeTargetDirectory', relativeTargetDir: 'lib/code'],
                            [$class: 'LocalBranch', localBranch: "**"]
                          ],
                        submoduleCfg: [],
                        userRemoteConfigs: [[credentialsId: "${GIT_CREDS}",
                        url: 'git@github.com:funi-main/source-2.git']]
                    ])
                    sh 'git tag -a -f ${JGIT_TAG} -m "Jenkins build tag"'
                }

                dir('source-dir') {
                    checkout([$class: 'GitSCM',
                        branches: [[name: '*/${KANE_BRANCH}']],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [
                            [$class: 'RelativeTargetDirectory', relativeTargetDir: 'lib/source2apps'],
                            [$class: 'LocalBranch', localBranch: "**"]
                          ],
                        submoduleCfg: [],
                        userRemoteConfigs: [[credentialsId: "${GIT_CREDS}",
                        url: 'git@github.com:funi-main/source2apps.git']]
                    ])
                    sh 'git tag -a -f ${JGIT_TAG} -m "Jenkins build tag"'
                }

                dir('funimation-source-dir') {
                    checkout([$class: 'GitSCM',
                        branches: [[name: '${KANE_BRANCH}']],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [
                            [$class: 'RelativeTargetDirectory', relativeTargetDir: 'lib/source2apps'],
                            [$class: 'LocalBranch', localBranch: "**"]
                          ],
                        submoduleCfg: [],
                        userRemoteConfigs: [[credentialsId: "${GIT_CREDS}",
                        url: 'git@github.com:funi-main/funimation-source.git']]
                    ])
                    sh 'git tag -a -f ${JGIT_TAG} -m "Jenkins build tag"'
                }
            }
        }
    }
}