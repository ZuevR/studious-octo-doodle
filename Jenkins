pipeline {
    agent any

    stages {
        stage('Prepare ENV') {
            steps {
                script {
                    if ("${tagToCreate}".isEmpty()) {
                        throw new Exception("tagToCreate field is missing, please check")
                    }
                    if ("${WORK_BRANCH}" == "dev") {
                        env.APP_ENV_NAME = "development"
                        env.JGIT_TAG = "${tagToCreate}.${BUILD_NUMBER}.fun-be-${APP_ENV_NAME}"
                    } else if ("${WORK_BRANCH}" == "qa") {
                        env.APP_ENV_NAME = "qa"
                        // this test data
                        env.JGIT_TAG = "3.2.1637.fun-be-qa"
                    } else if ("${WORK_BRANCH}" == "stage") {
                        env.APP_ENV_NAME = "uat"
                        env.JGIT_TAG = "${tagToCreate}.${BUILD_NUMBER}.fun-be-${APP_ENV_NAME}"
                    } else {
                        echo "WORK_BRANCH field is missing, please check"
                        exit 1
                    }
                }
            }
        }

        stage('Set tags') {
            steps {
                dir('src') {
                    checkout([$class: 'GitSCM',
                        branches: [[name: '*/venue']],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [
                            [
                                $class: 'SparseCheckoutPaths',
                                sparseCheckoutPaths: [
                                    [ $class: 'SparseCheckoutPath', path: 'backend/' ],
                                    [ $class: 'SparseCheckoutPath', path: 'maintenance/' ],
                                ]
                            ],
                            [$class: 'LocalBranch', localBranch: "**"]
                        ],
                        submoduleCfg: [],
                        userRemoteConfigs: [[credentialsId: "${GIT_CREDS}",
                        url: 'git@github.com:funi-main/source2-main.git']]
                    ])
                    sh 'git tag -a -f ${JGIT_TAG} -m "Jenkins build tag"'
                     //sshagent(["${GIT_CREDS}"]) {
                     //   sh "git push git@github.com:funi-main/source2-main.git ${JGIT_TAG}"
                     //}
                }

                dir('code-dir') {
                    checkout([$class: 'GitSCM',
                        branches: [[name: '*/${WORK_BRANCH}']],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [
                            [$class: 'RelativeTargetDirectory', relativeTargetDir: 'lib/code'],
                            [$class: 'LocalBranch', localBranch: "**"]
                          ],
                        submoduleCfg: [],
                        userRemoteConfigs: [[credentialsId: "${GIT_CREDS}",
                        url: 'git@github.com:funi-main/source-2.git']]
                    ])
                    sh 'git tag -a -f ${JGIT_TAG} -m "Jenkins build tag"'
                    //sshagent(["${GIT_CREDS}"]) {
                    //   sh "git push git@github.com:funi-main/source-2.git ${JGIT_TAG}"
                    //}
                }

                dir('source-dir') {
                    checkout([$class: 'GitSCM',
                        branches: [[name: '*/${WORK_BRANCH}']],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [
                            [$class: 'RelativeTargetDirectory', relativeTargetDir: 'lib/source2apps'],
                            [$class: 'LocalBranch', localBranch: "**"]
                          ],
                        submoduleCfg: [],
                        userRemoteConfigs: [[credentialsId: "${GIT_CREDS}",
                        url: 'git@github.com:funi-main/source2apps.git']]
                    ])
                    sh 'git tag -a -f ${JGIT_TAG} -m "Jenkins build tag"'
                    //sshagent(["${GIT_CREDS}"]) {
                    //   sh "git@github.com:funi-main/source2apps.git ${JGIT_TAG}"
                    //}
                }

                dir('funimation-source-dir') {
                    checkout([$class: 'GitSCM',
                        branches: [[name: '${WORK_BRANCH}']],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [
                            [$class: 'RelativeTargetDirectory', relativeTargetDir: 'lib/funimation-source'],
                            [$class: 'LocalBranch', localBranch: "**"]
                          ],
                        submoduleCfg: [],
                        userRemoteConfigs: [[credentialsId: "${GIT_CREDS}",
                        url: 'git@github.com:funi-main/funimation-source.git']]
                    ])
                    sh 'git tag -a -f ${JGIT_TAG} -m "Jenkins build tag"'
                    //sshagent(["${GIT_CREDS}"]) {
                    //   sh "git@github.com:funi-main/funimation-source.git ${JGIT_TAG}"
                    //}
                }
            }
        }

        stage('Venue Migrations') {
            steps{
                dir('code-dir') {
                    checkout([$class: 'GitSCM',
                        branches: [[name: "tags/${env.JGIT_TAG}"]],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [
                            [$class: 'RelativeTargetDirectory', relativeTargetDir: 'lib/code'],
                            [$class: 'LocalBranch', localBranch: "**"]
                          ],
                        submoduleCfg: [],
                        userRemoteConfigs: [[credentialsId: "${GIT_CREDS}",
                        url: 'git@github.com:funi-main/source-2.git']]
                    ])
                }

                dir('source-dir') {
                    checkout([$class: 'GitSCM',
                        branches: [[name: "tags/${env.JGIT_TAG}"]],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [
                            [$class: 'RelativeTargetDirectory', relativeTargetDir: 'lib/source2apps'],
                            [$class: 'LocalBranch', localBranch: "**"]
                          ],
                        submoduleCfg: [],
                        userRemoteConfigs: [[credentialsId: "${GIT_CREDS}",
                        url: 'git@github.com:funi-main/source2apps.git']]
                    ])
                }

                dir('funimation-source-dir') {
                    checkout([$class: 'GitSCM',
                        branches: [[name: "tags/${env.JGIT_TAG}"]],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [
                            [$class: 'RelativeTargetDirectory', relativeTargetDir: 'lib/funimation-source'],
                            [$class: 'LocalBranch', localBranch: "**"]
                          ],
                        submoduleCfg: [],
                        userRemoteConfigs: [[credentialsId: "${GIT_CREDS}",
                        url: 'git@github.com:funi-main/funimation-source.git']]
                    ])
                }

                dir('geoip') {
                    checkout([$class: 'GitSCM',
                        branches: [[name: '*/master']],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [
                            [$class: 'RelativeTargetDirectory', relativeTargetDir: 'geoip'],
                            [$class: 'LocalBranch', localBranch: "**"]
                          ],
                        submoduleCfg: [],
                        userRemoteConfigs: [[credentialsId: "${GIT_CREDS}",
                        url: 'git@github.com:maxmind/geoipupdate.git']]
                    ])
                }

                timestamps {
                    ansiColor('xterm') {
                        sh '''#!/bin/bash
                        sed -i "s/BUILD_NUMBER_PLACEHOLDER/${BUILD_NUMBER}/g" src/backend/Dockerfile
                        sed -i "s/JENKINS_JOB_NAME_PLACEHOLDER/${JOB_NAME}/g" src/backend/Dockerfile
                        #sed -i "s/GIT_TAG_PLACEHOLDER/${tagName:-Untagged}/g" src/backend/Dockerfile
                        #sed -i "s/GIT_BRANCH_PLACEHOLDER/${GIT_BRANCH}/g" src/backend/Dockerfile
                        '''
                    }
                }
            }
        }
    }
}