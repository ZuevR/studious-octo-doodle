pipeline {
    agent any

    stages {
        stage('Prepare ENV') {
            steps {
                script {
                    if ("${tagToCreate}".isEmpty()) {
                        throw new Exception("tagToCreate field is missing, please check")
                    }
                    if ("${WORK_BRANCH}" == "dev") {
                        env.APP_ENV_NAME = "development"
                        env.JGIT_TAG = "${tagToCreate}.${BUILD_NUMBER}.fun-be-${APP_ENV_NAME}"
                    } else if ("${WORK_BRANCH}" == "qa") {
                        env.APP_ENV_NAME = "qa"
                        // this test data
                        env.JGIT_TAG = "3.2.1637.fun-be-qa"
                    } else if ("${WORK_BRANCH}" == "stage") {
                        env.APP_ENV_NAME = "uat"
                        env.JGIT_TAG = "${tagToCreate}.${BUILD_NUMBER}.fun-be-${APP_ENV_NAME}"
                    } else {
                        echo "WORK_BRANCH field is missing, please check"
                        exit 1
                    }
                    env.DOCKER_BASE_COND = "${ECR_URL}/source2base-${APP_ENV_NAME}"
                    env.DOCKER_BUILD_MIGRATION = "${ECR_URL}/venue-be-${APP_ENV_NAME}"
                }
            }
        }

        stage('Set tags') {
            steps {
                dir('src') {
                    checkout([$class: 'GitSCM',
                        branches: [[name: '*/venue']],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [
                            [
                                $class: 'SparseCheckoutPaths',
                                sparseCheckoutPaths: [
                                    [ $class: 'SparseCheckoutPath', path: 'backend/' ],
                                    [ $class: 'SparseCheckoutPath', path: 'maintenance/' ],
                                ]
                            ],
                            [$class: 'LocalBranch', localBranch: "**"]
                        ],
                        submoduleCfg: [],
                        userRemoteConfigs: [[credentialsId: "${GIT_CREDS}",
                        url: 'git@github.com:funi-main/source2-main.git']]
                    ])
                    sh 'git tag -a -f ${JGIT_TAG} -m "Jenkins build tag"'
                     //sshagent(["${GIT_CREDS}"]) {
                     //   sh "git push git@github.com:funi-main/source2-main.git ${JGIT_TAG}"
                     //}
                }

                checkout([$class: 'GitSCM',
                    branches: [[name: '*/${WORK_BRANCH}']],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [
                        [$class: 'RelativeTargetDirectory', relativeTargetDir: 'lib/code'],
                        [$class: 'LocalBranch', localBranch: "**"]
                      ],
                    submoduleCfg: [],
                    userRemoteConfigs: [[credentialsId: "${GIT_CREDS}",
                    url: 'git@github.com:funi-main/source-2.git']]
                ])
                sh 'git tag -a -f ${JGIT_TAG} -m "Jenkins build tag"'
                //sshagent(["${GIT_CREDS}"]) {
                //   sh "git push git@github.com:funi-main/source-2.git ${JGIT_TAG}"
                //}

                checkout([$class: 'GitSCM',
                    branches: [[name: '*/${WORK_BRANCH}']],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [
                        [$class: 'RelativeTargetDirectory', relativeTargetDir: 'lib/source2apps'],
                        [$class: 'LocalBranch', localBranch: "**"]
                      ],
                    submoduleCfg: [],
                    userRemoteConfigs: [[credentialsId: "${GIT_CREDS}",
                    url: 'git@github.com:funi-main/source2apps.git']]
                ])
                sh 'git tag -a -f ${JGIT_TAG} -m "Jenkins build tag"'
                //sshagent(["${GIT_CREDS}"]) {
                //   sh "git@github.com:funi-main/source2apps.git ${JGIT_TAG}"
                //}


                checkout([$class: 'GitSCM',
                    branches: [[name: '${WORK_BRANCH}']],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [
                        [$class: 'RelativeTargetDirectory', relativeTargetDir: 'lib/funimation-source'],
                        [$class: 'LocalBranch', localBranch: "**"]
                      ],
                    submoduleCfg: [],
                    userRemoteConfigs: [[credentialsId: "${GIT_CREDS}",
                    url: 'git@github.com:funi-main/funimation-source.git']]
                ])
                sh 'git tag -a -f ${JGIT_TAG} -m "Jenkins build tag"'
                //sshagent(["${GIT_CREDS}"]) {
                //   sh "git@github.com:funi-main/funimation-source.git ${JGIT_TAG}"
                //}
            }
        }

        stage('Venue Migrations') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: "tags/${env.JGIT_TAG}"]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [
                        [$class: 'RelativeTargetDirectory', relativeTargetDir: 'lib/code'],
                        [$class: 'LocalBranch', localBranch: "**"]
                      ],
                    submoduleCfg: [],
                    userRemoteConfigs: [[credentialsId: "${GIT_CREDS}",
                    url: 'git@github.com:funi-main/source-2.git']]
                ])

                checkout([$class: 'GitSCM',
                    branches: [[name: "tags/${env.JGIT_TAG}"]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [
                        [$class: 'RelativeTargetDirectory', relativeTargetDir: 'lib/source2apps'],
                        [$class: 'LocalBranch', localBranch: "**"]
                      ],
                    submoduleCfg: [],
                    userRemoteConfigs: [[credentialsId: "${GIT_CREDS}",
                    url: 'git@github.com:funi-main/source2apps.git']]
                ])

                checkout([$class: 'GitSCM',
                    branches: [[name: "tags/${env.JGIT_TAG}"]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [
                        [$class: 'RelativeTargetDirectory', relativeTargetDir: 'lib/funimation-source'],
                        [$class: 'LocalBranch', localBranch: "**"]
                      ],
                    submoduleCfg: [],
                    userRemoteConfigs: [[credentialsId: "${GIT_CREDS}",
                    url: 'git@github.com:funi-main/funimation-source.git']]
                ])

                checkout([$class: 'GitSCM',
                    branches: [[name: '*/master']],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [
                        [$class: 'RelativeTargetDirectory', relativeTargetDir: 'geoip'],
                        [$class: 'LocalBranch', localBranch: "**"]
                      ],
                    submoduleCfg: [],
                    userRemoteConfigs: [[credentialsId: "${GIT_CREDS}",
                    url: 'git@github.com:maxmind/geoipupdate.git']]
                ])

                timestamps {
                    ansiColor('xterm') {
                        sh ''' #!/bin/bash
                        sed -i "s/BUILD_NUMBER_PLACEHOLDER/${BUILD_NUMBER}/g" src/backend/Dockerfile
                        sed -i "s/JENKINS_JOB_NAME_PLACEHOLDER/${JOB_NAME}/g" src/backend/Dockerfile
                        sed -i "s/GIT_TAG_PLACEHOLDER/${JGIT_TAG:-Untagged}/g" src/backend/Dockerfile
                        sed -i "s/GIT_BRANCH_PLACEHOLDER/${WORK_BRANCH}/g" src/backend/Dockerfile
                        '''
                    }
                }

                script {
                    echo "${JOB_NAME} - Tag: ${JGIT_TAG} Branch: ${GIT_BRANCH} BuildNum: ${BUILD_NUMBER} - STARTED"
                }

                // think should work
                //step([
                //    $class: 'DsbNotificationBuilder',
                //    extensions: [
                //        [
                //            $class: 'ProfileNotifier',
                //            message: "${JOB_NAME} - Tag: ${JGIT_TAG} Branch: ${WORK_BRANCH} BuildNum: ${BUILD_NUMBER} - STARTED",
                //            name: 'GS Venue DSB'
                //        ]
                //    ]
                //])


                timestamps {
                    ansiColor('xterm') {
                        sh ''' #!/bin/bash
                        mv src/backend/* ./ && rm -rf src/backend
                        rm -rf lib/code/source/apps
                        rm -rf lib/code/source/source_client

                        mv lib/source2apps lib/code/source/apps

                        cp -r src/maintenance lib/code/

                        mv lib/funimation-source lib/code/source/source_client
                        cp local_settings.py lib/code/source/source/local_settings.py

                        cp local_settings_client.py lib/code/source/source_client/local_settings.py

                        sed -i "s/.*FROM.*/FROM 933909558080.dkr.ecr.us-west-2.amazonaws.com\\/source2base-${APP_ENV_NAME}:latest/" Dockerfile

                        if [ $APP_ENV_NAME == "qa" ]
                        then
                        echo "ADD 0002_auto_20180629_1711.config /usr/local/lib/python2.7/dist-packages/social/apps/django_app/default/migrations/0002_auto_20180629_1711.py" >> Dockerfile
                        fi

                        if [ $APP_ENV_NAME == "uat" ]
                        then
                        echo "ADD 0002_auto_20180629_1711.config /usr/local/lib/python2.7/dist-packages/social/apps/django_app/default/migrations/0002_auto_20180725_2123.py" >> Dockerfile
                        fi

                        $(aws ecr get-login --region=us-west-2 --no-include-email)
                        '''
                    }
                }
            }
        }

        stage('asd') {
            steps {
                script {
                    if (RUN_MIGRATIONS != 'yes') {
                        currentBuild.result = 'ABORTED'
                        error('Aborting the build.')
                    }
                }
            }
        }

        stage('not') {
            steps {
                script {
                    echo '1'
                }
            }
        }



        /* stage('Docker Build Cond') {
            when {
                expression { params.BUILD_TYPE == 'Full' }
            }
            steps {
                sh '''#!/bin/bash
                docker build \
                --cache-from ${DOCKER_BASE_COND} \
                -t ${DOCKER_BASE_COND}:latest \
                -t ${DOCKER_BASE_COND}:${JGIT_TAG} \
                -f Dockerfile .
                #docker push ${ECR_URL}/source2base-${APP_ENV_NAME}:latest
                #docker push ${ECR_URL}/source2base-${APP_ENV_NAME}:${JGIT_TAG}
                '''
            }
        }

        stage('Docker Build') {
            steps {
                sh '''#!/bin/bash
                docker build \
                --build-arg KANE_BASE=${DOCKER_BASE} \
                -t ${DOCKER_BUILD_MIGRATION}:latest \
                -t ${DOCKER_BUILD_MIGRATION}:${JGIT_TAG}-migration \
                -f Dockerfile .
                #docker push ${ECR_URL}/${APP_NAME}-${APP_ENV}:latest
                #docker push ${ECR_URL}/${APP_NAME}-${APP_ENV}:${JGIT_TAG}-migration
                '''
            }
        } */
    }
}